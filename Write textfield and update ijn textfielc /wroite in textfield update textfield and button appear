import 'package:flutter/material.dart';

void main() {
  runApp(const MyApp());
}

class MyApp extends StatelessWidget {
  const MyApp({Key? key}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Dynamic Text Containers',
      theme: ThemeData(
        primarySwatch: Colors.purple,
        scaffoldBackgroundColor: Colors.grey[100],
        typography: Typography.material2018(),
        visualDensity: VisualDensity.adaptivePlatformDensity,
      ),
      home: const SearchPage(),
      debugShowCheckedModeBanner: false,
    );
  }
}


class SearchPage extends StatefulWidget {
  const SearchPage({Key? key}) : super(key: key);

  @override
  _SearchPageState createState() => _SearchPageState();
}

class _SearchPageState extends State<SearchPage> {
  final TextEditingController _textController = TextEditingController();
  final List<String> _textEntries = [];
  final FocusNode _focusNode = FocusNode();
  String _searchText = "";
  bool _showCreateButton = false;

  @override
  void initState() {
    super.initState();
    _textController.addListener(_onTextChanged);
  }

  void _onTextChanged() {
    setState(() {
      _searchText = _textController.text;
      _showCreateButton = _textController.text.isNotEmpty;
    });
  }

  @override
  void dispose() {
    _textController.removeListener(_onTextChanged);
    _textController.dispose();
    _focusNode.dispose();
    super.dispose();
  }

  void _addTextEntry() {
    if (_textController.text.isNotEmpty) {
      setState(() {
        _textEntries.add(_textController.text);
        _textController.clear();
        _searchText = "";
        _showCreateButton = false;
      });
      _focusNode.requestFocus();
    }
  }

  void _clearSearch() {
    setState(() {
      _textController.clear();
      _searchText = "";
      _showCreateButton = false;
    });
    _focusNode.requestFocus();
  }

  void _removeEntry(String entry) {
    setState(() {
      _textEntries.remove(entry);
    });
    _focusNode.requestFocus();
  }

  void _clearAllEntries() {
    setState(() {
      _textEntries.clear();
    });
    _focusNode.requestFocus();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: SafeArea(
        child: Padding(
          padding: const EdgeInsets.all(20.0),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              // Header
              Row(
                children: [
                  Text(
                    "Websites",
                    style: TextStyle(
                      fontSize: 22,
                      fontWeight: FontWeight.w600,
                      color: Colors.grey[800],
                      letterSpacing: 0.5,
                    ),
                  ),
                  const SizedBox(width: 4),
                  Text(
                    "*",
                    style: TextStyle(
                      fontSize: 22,
                      color: Colors.redAccent,
                      fontWeight: FontWeight.bold,
                    ),
                  ),
                ],
              ),

              const SizedBox(height: 20),

              // Search box container
              Material(
                elevation: 4,
                shadowColor: Colors.purple.withOpacity(0.1),
                borderRadius: BorderRadius.circular(30),
                child: Container(
                  decoration: BoxDecoration(
                    color: Colors.white,
                    borderRadius: BorderRadius.circular(30),
                    border: Border.all(color: Colors.purple.shade100, width: 1),
                  ),
                  child: Padding(
                    padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 8),
                    child: Row(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        Expanded(
                          child: Column(
                            crossAxisAlignment: CrossAxisAlignment.start,
                            children: [
                              Wrap(
                                spacing: 8,
                                runSpacing: 6,
                                crossAxisAlignment: WrapCrossAlignment.center,
                                children: [
                                  // Display chips
                                  ..._textEntries.map((entry) {
                                    return Chip(
                                      label: Text(
                                        entry,
                                        style: TextStyle(
                                          color: Colors.purple.shade700,
                                          fontSize: 14,
                                          fontWeight: FontWeight.w500,
                                        ),
                                      ),
                                      backgroundColor: Colors.purple.shade50,
                                      elevation: 2,
                                      shadowColor: Colors.purple.withOpacity(0.1),
                                      deleteIcon: Icon(
                                        Icons.close,
                                        size: 16,
                                        color: Colors.purple.shade700,
                                      ),
                                      onDeleted: () => _removeEntry(entry),
                                      padding: EdgeInsets.symmetric(horizontal: 8, vertical: 4),
                                      shape: RoundedRectangleBorder(
                                        borderRadius: BorderRadius.circular(20),
                                        side: BorderSide(
                                          color: Colors.purple.shade100,
                                          width: 1,
                                        ),
                                      ),
                                    );
                                  }).toList(),
                                  // TextField for input
                                  Container(
                                    constraints: BoxConstraints(
                                      minWidth: 100,
                                      maxWidth: MediaQuery.of(context).size.width * 0.5,
                                    ),
                                    child: IntrinsicWidth(
                                      child: TextField(
                                        controller: _textController,
                                        focusNode: _focusNode,
                                        minLines: 1,
                                        maxLines: null,
                                        style: TextStyle(
                                          color: Colors.grey[800],
                                          fontSize: 16,
                                        ),
                                        decoration: InputDecoration(
                                          border: InputBorder.none,
                                          hintText: _textEntries.isEmpty ? 'Enter text...' : '',
                                          hintStyle: TextStyle(
                                            color: Colors.grey[400],
                                            fontSize: 16,
                                          ),
                                          isDense: true,
                                          contentPadding: EdgeInsets.symmetric(vertical: 8),
                                        ),
                                      ),
                                    ),
                                  ),
                                ],
                              ),
                              // Additional close icon under TextField
                              if (_textEntries.length >= 1)
                                Padding(
                                  padding: const EdgeInsets.only(top: 8.0),
                                  child: IconButton(
                                    icon: Icon(
                                      Icons.close,
                                      color: Colors.purple.shade700,
                                      size: 20,
                                    ),
                                    onPressed: _clearAllEntries,
                                    tooltip: 'Clear all items',
                                  ),
                                ),
                            ],
                          ),
                        ),
                        // Clear and Globe icons
                        if (_showCreateButton)
                          Row(
                            children: [
                              IconButton(
                                onPressed: _clearSearch,
                                icon: Icon(
                                  Icons.close,
                                  color: Colors.grey[500],
                                  size: 20,
                                ),
                              ),
                              Icon(
                                Icons.language,
                                color: Colors.grey[500],
                                size: 20,
                              ),
                            ],
                          ),
                      ],
                    ),
                  ),
                ),
              ),

              const SizedBox(height: 20),

              // Create button with animation
              AnimatedOpacity(
                opacity: _showCreateButton ? 1.0 : 0.0,
                duration: Duration(milliseconds: 300),
                child: _showCreateButton
                    ? GestureDetector(
                  onTap: _addTextEntry,
                  child: Material(
                    elevation: 4,
                    shadowColor: Colors.purple.withOpacity(0.2),
                    borderRadius: BorderRadius.circular(12),
                    child: Container(
                      width: double.infinity,
                      padding: const EdgeInsets.symmetric(vertical: 16),
                      decoration: BoxDecoration(
                        color: Colors.purple.shade600,
                        borderRadius: BorderRadius.circular(12),
                        gradient: LinearGradient(
                          colors: [
                            Colors.purple.shade600,
                            Colors.purple.shade400,
                          ],
                          begin: Alignment.topLeft,
                          end: Alignment.bottomRight,
                        ),
                      ),
                      child: Center(
                        child: Text(
                          'Create "${_textController.text}"',
                          style: TextStyle(
                            color: Colors.white,
                            fontSize: 18,
                            fontWeight: FontWeight.w600,
                            letterSpacing: 0.5,
                          ),
                        ),
                      ),
                    ),
                  ),
                )
                    : SizedBox.shrink(),
              ),
            ],
          ),
        ),
      ),
    );
  }
}
