import 'dart:io';
import 'package:cached_network_image/cached_network_image.dart';
import 'package:flutter/cupertino.dart';
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:flutter/widgets.dart';
import 'package:font_awesome_flutter/font_awesome_flutter.dart';
import 'package:pharma_clients_app/data/model/requested_data_model/cartEntity.dart';
import 'package:pharma_clients_app/utils/button.dart';
import 'package:pharma_clients_app/utils/utils.dart';
import 'package:provider/provider.dart';
import 'package:responsive_sizer/responsive_sizer.dart';
import '../../data/model/response_model/products/product_reponse_model.dart';
import '../../resources/app_colors.dart';
import '../../resources/constant_imageString.dart';
import '../../resources/constant_strings.dart';
import '../../view_model/afterLogin_viewModel/afterLogin_viewModels.dart';
import '../homescreen/visual_aids_screen.dart';
import 'product_detail_screen.dart';
import '../../utils/text_style.dart';

class ProductList extends StatelessWidget {
  ProductList({
    Key? key,
    required this.product,
    this.token,
  }) : super(key: key);

  final List<Products> product;
  String? token;
  List<Products> value1 = [];
  List img = [];
  List order = [];
  dynamic data;

  TextEditingController quanity = TextEditingController();

  String capitalizeWords(String str) {
    List<String> parts = str.split(' ');

    for (int i = 0; i < parts.length; i++) {
      List<String> subParts = parts[i].split('-');
      for (int j = 0; j < subParts.length; j++) {
        if (subParts[j].isNotEmpty) {
          if (j == 0) {
            subParts[j] = subParts[j][0].toUpperCase() + subParts[j].substring(1).toLowerCase();
          } else {
            subParts[j] = subParts[j].toUpperCase();
          }
        }
      }
      parts[i] = subParts.join('-');
    }

    return parts.join(' ');
  }

  @override
  Widget build(BuildContext context) {
    final cartProvider = Provider.of<Cart>(context, listen: false);
    final provider = Provider.of<ProductViewModel>(context, listen: false);

    img.clear();

    for (var element in product) {
      if (element.images != null && element.images!.isNotEmpty) {
        data = element.images?.firstWhere((ele) => ele.type == "IMG", orElse: () => Images(url: null, type: null));
        if (data != null) {
          img.add(data!.url);
        }
      } else {
        img.add(data == false);
      }
    }

    Future<void> bottomSheet(context, index) {
      return showModalBottomSheet<void>(
        shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.vertical(top: Radius.circular(2.h))
        ),
        backgroundColor: AppColors.backgroundColor,
        isScrollControlled: true,
        useSafeArea: true,
        context: context,
        builder: (BuildContext context) {
          return Container(
            height: 70.h,
            width: 90.w,
            margin: EdgeInsets.fromLTRB(3.h, 5.h, 3.h, 5.h),
            child: Column(
              mainAxisAlignment: MainAxisAlignment.spaceAround,
              crossAxisAlignment: CrossAxisAlignment.center,
              children: [
                TextWithStyle.appBarTitle(context, 'Select Packaging:'),
                SizedBox(height: 1.5.h),
                Expanded(
                    child: (product[index].packingVarient != null && product[index].packingVarient?.length != 0)
                        ? SingleChildScrollView(
                        child: Column(
                          children: product[index].packingVarient!.map((order) {
                            return Container(
                                margin: EdgeInsets.only(bottom: 1.h),
                                padding: EdgeInsets.only(left: 3.w),
                                height: 10.h,
                                decoration: const BoxDecoration(
                                  color: Colors.white,
                                  borderRadius: BorderRadius.all(Radius.circular(10)),
                                ),
                                child: Row(
                                  mainAxisAlignment: MainAxisAlignment.spaceBetween,
                                  children: [
                                    Image.asset(ConstantImage.packingVarient, scale: 4),
                                    SizedBox(width: 1.5.h),
                                    Expanded(
                                        child: Column(
                                          mainAxisAlignment: MainAxisAlignment.center,
                                          crossAxisAlignment: CrossAxisAlignment.start,
                                          children: [
                                            TextWithStyle.productDescription(context, '${order.packingType?.label ?? 'na'} (${order.packing ?? 'na'})'),
                                            SizedBox(height: 1.w),
                                            TextWithStyle.productPrice(context, order.price.toString())
                                          ],
                                        )
                                    ),
                                    Consumer<Cart>(
                                      builder: (BuildContext context, cart, Widget? child) {
                                        final itemCount = cart.itemCount2(
                                            product[index].id!.toString(),
                                            order.packingType?.value,
                                            order.packing,
                                            order.price?.toDouble().toString() ?? '0.0'
                                        );
                                        final count = cart.items.where((element) =>
                                        element.id == product[index].id! &&
                                            element.packingValue == order.packingType!.value &&
                                            element.packing == order.packing &&
                                            element.price == order.price
                                        ).map((e) => e.quantity).join();

                                        if (itemCount > 0) {
                                          TextEditingController qty = TextEditingController(text: count.toString());
                                          return Row(
                                            mainAxisSize: MainAxisSize.min,
                                            children: [
                                              IconButton(
                                                icon: const Icon(CupertinoIcons.minus_circle_fill),
                                                iconSize: 3.h,
                                                color: AppColors.primaryColor,
                                                onPressed: () {
                                                  cartProvider.removeItem(
                                                    CartEntity(
                                                      id: product[index].id!,
                                                      name: product[index].name!,
                                                      price: order.price!.toDouble(),
                                                      packing: order.packing!,
                                                      packingType: order.packingType!.label!,
                                                      packingValue: order.packingType!.value,
                                                    ),
                                                  );
                                                },
                                              ),
                                              SizedBox(
                                                  width: 13.w,
                                                  height: 4.h,
                                                  child: TextFormField(
                                                    style: TextStyle(fontSize: 17.sp),
                                                    controller: qty,
                                                    textAlign: TextAlign.center,
                                                    keyboardType: TextInputType.number,
                                                    onFieldSubmitted: (value) {
                                                      cartProvider.updateItemQuantity(
                                                        CartEntity(
                                                            id: product[index].id!,
                                                            name: product[index].name!,
                                                            price: order.price!.toDouble(),
                                                            packing: order.packing!,
                                                            packingType: order.packingType!.label!,
                                                            packingValue: order.packingType!.value!
                                                        ),
                                                        int.tryParse(value) ?? 0,
                                                      );
                                                    },
                                                    decoration: const InputDecoration(
                                                      contentPadding: EdgeInsets.fromLTRB(0, 15, 10, 12),
                                                    ),
                                                  )
                                              ),
                                              IconButton(
                                                icon: const Icon(CupertinoIcons.add_circled_solid),
                                                iconSize: 3.h,
                                                color: AppColors.primaryColor,
                                                onPressed: () {
                                                  cartProvider.addItem(
                                                    CartEntity(
                                                        id: product[index].id!,
                                                        name: product[index].name!,
                                                        price: order.price!.toDouble(),
                                                        packing: order.packing!,
                                                        packingType: order.packingType!.label!,
                                                        packingValue: order.packingType!.value
                                                    ),
                                                  );
                                                },
                                              ),
                                            ],
                                          );
                                        } else {
                                          return Container(
                                            margin: EdgeInsets.only(right: 3.w),
                                            child: OutlinedButton(
                                                onPressed: () {
                                                  final cart = context.read<Cart>();
                                                  cart.addItem(
                                                    CartEntity(
                                                        id: product[index].id!,
                                                        name: product[index].name!,
                                                        price: order.price?.toDouble() ?? 0,
                                                        packing: order.packing!,
                                                        packingType: order.packingType!.label!,
                                                        packingValue: order.packingType!.value
                                                    ),
                                                  );
                                                },
                                                style: OutlinedButton.styleFrom(
                                                    side: BorderSide(color: AppColors.primaryColor),
                                                    backgroundColor: Colors.white,
                                                    shape: const RoundedRectangleBorder(
                                                        borderRadius: BorderRadius.all(Radius.circular(10))
                                                    )
                                                ),
                                                child: TextWithStyle.addToCartTitles(
                                                    context, ConstantStrings.addToCart, AppColors.primaryColor
                                                )
                                            ),
                                          );
                                        }
                                      },
                                    )
                                  ],
                                )
                            );
                          }).toList(),
                        )
                    )
                        : Text(product[index].packing ?? 'Na')
                ),
                Button(
                  title: 'Done',
                  onPress: () {
                    Navigator.pop(context);
                  },
                  loading: false,
                )
              ],
            ),
          );
        },
      );
    }

    List<FocusNode> focusNodes = List.generate(
      product.length,
          (index) => FocusNode(),
    );

    return product.isNotEmpty
        ? LayoutBuilder(
      builder: (context, constraints) {
        final isTablet = constraints.maxWidth > 600;
        final crossAxisCount = isTablet ? 2 : 1;

        return GridView.builder(
          gridDelegate: SliverGridDelegateWithFixedCrossAxisCount(
            crossAxisCount: crossAxisCount,
            childAspectRatio: isTablet ? 1.2 : 2.2,
            crossAxisSpacing: 10,
            mainAxisSpacing: 10,
          ),
          itemCount: product.length,
          itemBuilder: (context, index) {
            return ChangeNotifierProvider.value(
              value: provider,
              child: InkWell(
                onTap: () {
                  value1.add(product[index]);
                  Navigator.push(
                    context,
                    MaterialPageRoute(builder: (context) => ProductDetailScreen(value1, null)),
                  );
                },
                child: Container(
                  margin: EdgeInsets.all(1.w),
                  padding: EdgeInsets.all(2.w),
                  decoration: BoxDecoration(
                    color: Colors.white,
                    borderRadius: BorderRadius.circular(10),
                    boxShadow: [
                      BoxShadow(
                        color: AppColors.primaryColor.withOpacity(0.1),
                        spreadRadius: 0.5,
                        blurRadius: 2,
                        offset: const Offset(0, 0),
                      )
                    ],
                  ),
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Row(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        children: [
                          InkWell(
                            onTap: () {
                              Navigator.push(context, MaterialPageRoute(builder: (context) => ImagePage(images: img[index], initialIndex: index)));
                            },
                            child: Container(
                              height: 10.h,
                              width: 10.h,
                              child: ClipRRect(
                                borderRadius: BorderRadius.circular(2.h),
                                child: (img[index] != false && img[index] != null)
                                    ? CachedNetworkImage(
                                  placeholderFadeInDuration: const Duration(seconds: 2),
                                  placeholder: (context, url) => Container(
                                    color: AppColors.backgroundColor,
                                    child: Center(
                                      child: Image.asset(
                                        'assets/images/png/loading.gif',
                                      ),
                                    ),
                                  ),
                                  imageUrl: '${img[index]}',
                                  fit: BoxFit.cover,
                                )
                                    : Image.asset(
                                  'assets/images/png/no_image.png',
                                  fit: BoxFit.cover,
                                ),
                              ),
                            ),
                          ),
                          SizedBox(width: 2.w),
                          Expanded(
                            child: Column(
                              crossAxisAlignment: CrossAxisAlignment.start,
                              children: [
                                Row(
                                  mainAxisAlignment: MainAxisAlignment.spaceBetween,
                                  children: [
                                    Expanded(
                                      child: TextWithStyle.productTitle(
                                        context,
                                        capitalizeWords(product[index].name ?? "NA"),
                                      ),
                                    ),
                                    _buildFavoriteButton(context, provider, product[index]),
                                  ],
                                ),
                                TextWithStyle.productTypeName(context, capitalizeWords(product[index].typeName ?? 'Na')),
                                SizedBox(height: 1.h),
                                TextWithStyle.productDescription(
                                  context,
                                  capitalizeWords(product[index].details ?? 'na'),
                                ),
                              ],
                            ),
                          ),
                        ],
                      ),
                      Spacer(),
                      Row(
                        mainAxisAlignment: MainAxisAlignment.spaceBetween,
                        crossAxisAlignment: CrossAxisAlignment.center,
                        children: [
                          Column(
                            crossAxisAlignment: CrossAxisAlignment.start,
                            children: [
                              TextWithStyle.productPrice(context, '${product[index].packingVarient?[0].price ?? 0}'),
                              TextWithStyle.productTypeName(
                                context,
                                'Per ${product[index].packingVarient?[0].packingType?.label ?? 'NA'}',
                              ),
                            ],
                          ),
                          _buildAddToCartButton(context, cartProvider, product[index], bottomSheet, index, focusNodes[index]),
                        ],
                      ),
                    ],
                  ),
                ),
              ),
            );
          },
        );
      },
    )
        :Center(
      child: SingleChildScrollView(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Image.asset(
              ConstantImage.empty,
              width: 70.w,
              fit: BoxFit.fill,
            ),
            SizedBox(height: 2.h),
            TextWithStyle.appBarTitle(context, ConstantStrings.emptyScreen)
          ],
        ),
      ),
    );
  }

  Widget _buildFavoriteButton(BuildContext context, ProductViewModel provider, Products product) {
    return token != null && token!.isNotEmpty
        ? Consumer<ProductViewModel>(
      builder: (context, productProvider, child) {
        final isFav = product.favourite;
        return IconButton(
          onPressed: () {
            provider.toggleFavoriteStatus(product, context);
          },
          icon: FaIcon(
            isFav! ? FontAwesomeIcons.solidStar : FontAwesomeIcons.star,
            color: AppColors.primaryColor,
          ),
          iconSize: 4.w,
        );
      },
    )
        : IconButton(
      onPressed: () {
        Utils.flushBarErrorMessage(ConstantStrings.favouriteErrorMessage, context);
      },
      icon: FaIcon(
        FontAwesomeIcons.star,
        color: AppColors.primaryColor,
      ),
      iconSize: 4.w,
    );
  }

  Widget _buildAddToCartButton(BuildContext context, Cart cartProvider, Products product, Function bottomSheet, int index, FocusNode focusNode) {
    return Consumer<Cart>(
      builder: (BuildContext context, cart, Widget? child) {
        final itemCount = cart.itemCount(product.id!);
        final count = cart.items.where((element) => element.id == product.id!).map((e) => e.quantity).join();
        final String count2 = cart.items.where((element) => element.id == product.id!).length.toString();

        if (itemCount > 0) {
          TextEditingController qty = TextEditingController(text: count.toString());
          return product.packingVarient!.length > 1
              ? ElevatedButton(
            onPressed: () {
              bottomSheet(context, index);
            },
            style: ElevatedButton.styleFrom(
              backgroundColor: AppColors.primaryColor,
              shape: RoundedRectangleBorder(
                borderRadius: BorderRadius.circular(10),
              ),
            ),
            child: TextWithStyle.addToCartTitles(context, '-   ${count2}   +', Colors.white),
          )
              : Row(
            mainAxisSize: MainAxisSize.min,
            children: [
              IconButton(
                icon: const Icon(CupertinoIcons.minus_circle_fill),
                iconSize: 3.h,
                color: AppColors.primaryColor,
                onPressed: () {
                  cartProvider.removeItem(
                    CartEntity(
                      id: product.id!,
                      name: product.name!,
                      price: product.packingVarient![0].price!.toDouble(),
                      packing: product.packingVarient![0].packing!,
                      packingType: product.packingVarient![0].packingType!.label!,
                      packingValue: product.packingVarient![0].packingType!.value!,
                    ),
                  );
                },
              ),
              SizedBox(
                width: 10.w,
                height: 4.h,
                child: TextFormField(
                  style: TextStyle(fontSize: 17.sp),
                  controller: qty,
                  focusNode: focusNode,
                  textAlign: TextAlign.center,
                  textInputAction: TextInputAction.done,
                  keyboardType: TextInputType.number,
                  onFieldSubmitted: (value) {
                    cartProvider.updateItemQuantity(
                      CartEntity(
                        id: product.id!,
                        name: product.name!,
                        price: product.packingVarient![0].price!.toDouble(),
                        packing: product.packingVarient![0].packing!,
                        packingType: product.packingVarient![0].packingType!.label!,
                        packingValue: product.packingVarient![0].packingType!.value!,
                      ),
                      int.tryParse(value) ?? 0,
                    );
                  },
                  decoration: const InputDecoration(
                    contentPadding: EdgeInsets.fromLTRB(0, 15, 0, 12),
                  ),
                ),
              ),
              IconButton(
                icon: const Icon(CupertinoIcons.add_circled_solid),
                iconSize: 3.h,
                color: AppColors.primaryColor,
                onPressed: () {
                  cartProvider.addItem(
                    CartEntity(
                      id: product.id!,
                      name: product.name!,
                      price: product.packingVarient![0].price!.toDouble(),
                      packing: product.packingVarient![0].packing!,
                      packingType: product.packingVarient![0].packingType!.label!,
                      packingValue: product.packingVarient![0].packingType!.value!,
                    ),
                  );
                },
              ),
            ],
          );
        } else {
          return OutlinedButton(
            onPressed: () {
              if (token != null && token!.isNotEmpty) {
                if (product.packingVarient != null && product.packingVarient?.length != 0) {
                  if (product.packingVarient?.length == 1) {
                    final cart = context.read<Cart>();
                    cart.addItem(
                      CartEntity(
                        id: product.id!,
                        name: product.name!,
                        price: product.packingVarient?[0].price!.toDouble() ?? 0,
                        packing: product.packingVarient?[0].packing ?? '',
                        packingType: product.packingVarient?[0].packingType!.label ?? '',
                        packingValue: product.packingVarient?[0].packingType!.value,
                      ),
                    );
                  } else {
                    bottomSheet(context, index);
                  }
                } else {
                  final cart = context.read<Cart>();
                  cart.addItem(
                    CartEntity(
                      id: product.id!,
                      name: product.name!,
                      price: product.price!.toDouble(),
                      packing: product.packing!,
                      packingType: product.packingType!,
                    ),
                  );
                }
              } else {
                Utils.flushBarErrorMessage(ConstantStrings.cartAddErrorMessage, context);
              }
            },
            style: OutlinedButton.styleFrom(
              side: BorderSide(color: AppColors.primaryColor),
              backgroundColor: Colors.white,
              shape: RoundedRectangleBorder(
                borderRadius: BorderRadius.circular(10),
              ),
            ),
            child: TextWithStyle.addToCartTitles(context, ConstantStrings.addToCart, AppColors.primaryColor),
          );
        }
      },
    );
  }
}



class SelectPacking extends ChangeNotifier {

  List<PackingVarient> _products = [];
  List<PackingVarient> _selectedProducts = [];
  List<PackingVarient> get selectedProducts => _selectedProducts;

  bool get isSelectionMode => _selectedProducts.isNotEmpty;

  List<PackingVarient> get products => _products;

  SelectPacking() {
    _products = [];
    if (_products.isNotEmpty) {
      _selectedProducts.add(_products[0]);
    }
  }

  void toggleSelection(PackingVarient product) {
    if (_selectedProducts.contains(product)) {
      _selectedProducts.remove(product);
    } else {
      _selectedProducts.clear();
      _selectedProducts.add(product);
    }
    notifyListeners();
  }

  bool isSelected(PackingVarient product) {
    return _selectedProducts.contains(product);
  }

}



