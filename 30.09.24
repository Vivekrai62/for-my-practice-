import 'package:flutter/material.dart';
import 'package:get/get.dart';
import 'package:url_launcher/url_launcher.dart';
import '../../Utils/Routes/routes_name.dart';
import '../../Utils/utils.dart';
import '../../resources/imageStrings/image_strings.dart';
import '../../resources/strings/strings.dart';
import '../../resources/textStyles/text_styles.dart';
import '../../utils/appColors/app_colors.dart';
import '../../utils/components/buttons/common_button.dart';
import '../../utils/responsive/bodies/responsive scaffold.dart';
import '../../viewModels/loginScreen/login_view_model.dart';

class LoginScreen extends StatefulWidget {
  const LoginScreen({Key? key}) : super(key: key);

  @override
  State<LoginScreen> createState() => _LoginScreenState();
}

class _LoginScreenState extends State<LoginScreen> {
  final LoginViewModel loginController = Get.put(LoginViewModel());
  final RxBool rememberMe = false.obs;
  final RxBool obscurePassword = true.obs;
  final formKey = GlobalKey<FormState>();
  final scaffoldKey = GlobalKey<ScaffoldState>(); // Add a GlobalKey for the Scaffold

  void toggleObscurePassword() {
    obscurePassword.value = !obscurePassword.value;
  }

  @override
  Widget build(BuildContext context) {
    final screenWidth = MediaQuery.of(context).size.width;
    final isSmallScreen = screenWidth < 550; // Adjust the threshold as needed

    return ResponsiveScaffold(
      scaffoldKey: scaffoldKey, // Pass the scaffold key
      body: LayoutBuilder(
        builder: (context, constraints) {
          return SingleChildScrollView(
            child: ConstrainedBox(
              constraints: BoxConstraints(
                minHeight: constraints.maxHeight,
              ),
              child: IntrinsicHeight(
                child: Padding(
                  padding: EdgeInsets.symmetric(
                    horizontal: screenWidth * 0.1,
                  ),
                  child: Column(
                    mainAxisAlignment: MainAxisAlignment.center,
                    children: [
                      Spacer(),
                      // Logo
                      Image.asset(
                        ImageStrings.splashWHLogo,
                        scale: isSmallScreen ? 7 : 6,
                      ),
                      SizedBox(height: Get.height / 28),

                      // Login Header
                      Column(
                        children: [
                          TextStyles.w500_universal(
                            fontSize: isSmallScreen ? 25 : 28,
                            context,
                            Strings.login,
                            color: AllColors.welcomeColor,
                          ),
                          SizedBox(height: Get.height / 100),
                          TextStyles.w400_13(color: AllColors.lightGrey, context, Strings.pleaseSignIn),
                          TextStyles.w400_13(color: AllColors.lightGrey, context, Strings.theAdventure),
                        ],
                      ),
                      SizedBox(height: Get.height / 20),

                      // Login Form
                      Form(
                        key: formKey,
                        child: Column(
                          crossAxisAlignment: CrossAxisAlignment.start,
                          children: [
                            TextStyles.w400_15(context, Strings.email),
                            _buildEmailField(),
                            SizedBox(height: 20),
                            TextStyles.w400_15(context, Strings.password),
                            _buildPasswordField(),
                          ],
                        ),
                      ),

                      SizedBox(height: Get.height / 30),
                      // Remember Me and Forgot Password
                      Row(
                        mainAxisAlignment: MainAxisAlignment.spaceBetween,
                        children: [
                          Row(
                            children: [
                              // Responsive Checkbox
                              SizedBox(
                                height: 20.0,
                                width: 20.0,
                                child: Obx(
                                      () => Checkbox(
                                    checkColor: Colors.black45,
                                    activeColor: Colors.blue,
                                    value: rememberMe.value,
                                    onChanged: (value) => rememberMe.value = value!,
                                  ),
                                ),
                              ),
                              SizedBox(width: 8), // Adjust spacing
                              // Responsive Text
                              TextStyles.w400_12(
                                context,
                                Strings.rememberMe,
                                color: AllColors.grey,
                              ),
                            ],
                          ),
                          // Responsive InkWell
                          InkWell(
                            onTap: () => Get.offNamed(RoutesName.forgot_password_screen),
                            child: TextStyles.w400_12(
                              context,
                              Strings.forgotPassword,
                              color: AllColors.buttonColor,
                            ),
                          ),
                        ],
                      ),

                      SizedBox(height: 23),
                      // Login Button
                      Obx(() => CommonButton(
                        width: double.infinity,
                        title: Strings.button,
                        loading: loginController.loading.value,
                        onPress: _handleLogin,
                      )),
                      SizedBox(height: 14),
                      // Sign Up Option
                      Row(
                        mainAxisAlignment: MainAxisAlignment.center,
                        children: [
                          TextStyles.w400_13(color: AllColors.lightGrey, context, Strings.newOn),
                          SizedBox(width: 4),
                          InkWell(
                            onTap: () async {
                              final Uri url = Uri.parse('https://www.whsuites.com');
                              print("Launching URL: $url");
                              try {
                                if (await canLaunchUrl(url)) {
                                  await launchUrl(url, mode: LaunchMode.externalApplication);
                                } else {
                                  Utils.flushBarErrorMessage('Could not launch the URL', context);
                                }
                              } catch (e) {
                                Utils.flushBarErrorMessage('Error launching the URL: $e', context);
                                print('Error launching URL: $e');
                              }
                            },
                            child: TextStyles.w400_13(
                              color: AllColors.buttonColor,
                              context,
                              Strings.purchaseNow,
                            ),
                          ),
                        ],
                      ),
                      Spacer(),
                      // Bottom Logo
                      Padding(
                        padding: const EdgeInsets.only(bottom: 20),
                        child: Image.asset(ImageStrings.splashBottomLogo, scale: 4),
                      ),
                    ],
                  ),
                ),
              ),
            ),
          );
        },
      ),
    );
  }

  Widget _buildEmailField() {
    return Container(
      padding: TextStyles.defaultPadding(context),
      decoration: BoxDecoration(
        borderRadius: BorderRadius.circular(5.0),
        color: AllColors.textField2,
      ),
      child: Obx(
            () => TextFormField(
          cursorColor: Colors.black45,
          controller: loginController.emailController.value,
          focusNode: loginController.emailFocusNode.value,
          validator: (value) {
            if (value!.isEmpty) {
              return Strings.flushEmail;
            }
            return null;
          },
          decoration: InputDecoration(
            border: InputBorder.none,
            hintText: Strings.hintEmail,
            hintStyle: TextStyles.textFormHintStyle(context),
          ),
          onFieldSubmitted: (value) {
            Utils.fieldFocusChange(
              context,
              loginController.emailFocusNode.value,
              loginController.passwordFocusNode.value,
            );
          },
        ),
      ),
    );
  }

  Widget _buildPasswordField() {
    return Container(
      padding: TextStyles.defaultPadding(context),
      decoration: BoxDecoration(
        borderRadius: BorderRadius.circular(5.0),
        color: AllColors.textField2,
      ),
      child: Obx(
            () => TextFormField(
          cursorColor: Colors.black45,
          controller: loginController.passwordController.value,
          focusNode: loginController.passwordFocusNode.value,
          obscureText: obscurePassword.value,
          validator: (value) {
            if (value!.isEmpty) {
              return Strings.flushPass;
            }
            return null;
          },
          decoration: InputDecoration(
            border: InputBorder.none,
            hintText: Strings.hintPassword,
            suffixIcon: InkWell(
              onTap: toggleObscurePassword,
              child: Icon(
                obscurePassword.value ? Icons.visibility_off_outlined : Icons.visibility,
              ),
            ),
            hintStyle: TextStyles.textFormHintStyle(context),
          ),
        ),
      ),
    );
  }

  void _handleLogin() {
    String email = loginController.emailController.value.text;
    String password = loginController.passwordController.value.text;
    final emailRegex = RegExp(r'^[\w-\.]+@([\w-]+\.)+[\w-]{2,4}$');

    // Check if the form is valid
    if (formKey.currentState != null) {
      if (email.isEmpty && password.isEmpty) {
        Utils.flushBarErrorMessage(Strings.flushEmailPassword, context);
      } else if (email.isEmpty) {
        Utils.flushBarErrorMessage(Strings.flushEmail, context);
      } else if (!emailRegex.hasMatch(email)) {
        Utils.flushBarErrorMessage(Strings.flushEmail, context);
      } else if (password.isEmpty) {
        Utils.flushBarErrorMessage(Strings.flushPass, context);
      } else {
        loginController.login(email as BuildContext, password);
      }
    }
  }
}











import 'package:flutter/material.dart';

class ResponsiveScaffold extends StatelessWidget {
  final GlobalKey<ScaffoldState> scaffoldKey;
  final Widget body;

  const ResponsiveScaffold({
    Key? key,
    required this.scaffoldKey,
    required this.body,
  }) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      key: scaffoldKey,
      backgroundColor: Colors.white,
      body: SafeArea(
        child: body,
      ),
    );
  }
}
