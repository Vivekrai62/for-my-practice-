lead trash 

==============
import 'package:flutter/material.dart';
import 'package:get/get.dart';
import 'package:websuites/viewModels/leadScreens/trashLeads/deleteList/delete_list_viewModel.dart';
import '../../../../../resources/strings/strings.dart';
import '../../../../../resources/textStyles/text_styles.dart';
import '../../../../../utils/appColors/app_colors.dart';
import '../../../../../utils/filter/FilterUtils.dart';
import '../../../../../utils/filter_Date/SelectDate.dart';
import '../../../../../viewModels/leadScreens/trashLeads/leadTypes/lead_type_viewModel.dart';

import '../../../createNewLead/widgets/createNewLeadCard/create_new_lead_card.dart';

class TrashFilter extends StatelessWidget {
  const TrashFilter({Key? key}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return Row(
      children: [
        Padding(
          padding: const EdgeInsets.only(right: 16),
          child: InkWell(
            onTap: () {
              DialogUtils.showFilterDialog(
                context,
                filterContent: TrashContentFilter(
                  scrollController: ScrollController(),
                  isFullScreen: true,
                ),
              );
            },
            child: Container(
              padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 8),
              decoration: BoxDecoration(
                color: Colors.transparent,
                border: Border.all(color: const Color(0xFFE2E2E2), width: 1),
                borderRadius: BorderRadius.circular(30),
              ),
              child: Row(
                children: [
                  Icon(Icons.filter_list_sharp, size: 17, color: AllColors.mediumPurple),
                  const SizedBox(width: 5),
                  Text(Strings.filter, style: const TextStyle(fontSize: 14, color: Colors.grey)),
                ],
              ),
            ),
          ),
        ),
      ],
    );
  }
}
class TrashContentFilter extends StatelessWidget {
  final ScrollController scrollController;
  final bool isFullScreen;

  const TrashContentFilter({
    Key? key,
    required this.scrollController,
    required this.isFullScreen,
  }) : super(key: key);

  @override
  Widget build(BuildContext context) {
    final TrashDeleteListViewModel trashDeleteListViewModel = Get.put(TrashDeleteListViewModel());
    final LeadTypeViewModel leadTypeViewModel = Get.put(LeadTypeViewModel());

    return Scaffold(
      backgroundColor: Colors.white,
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            Row(
              mainAxisAlignment: MainAxisAlignment.spaceBetween,
              children: [
                Text(
                  'Filters',
                  style: const TextStyle(
                    fontSize: 18,
                    fontWeight: FontWeight.bold,
                  ),
                ),
                IconButton(
                  icon: const Icon(Icons.close),
                  onPressed: () => Navigator.of(context).pop(),
                ),
              ],
            ),
            Expanded(
              child: SingleChildScrollView(
                controller: scrollController,
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    TextStyles.w500_14_Black(context, Strings.search),
                    // Search input field
                    TextField(
                      onChanged: (value) {
                        trashDeleteListViewModel.searchLeads(value); // Call the search method
                      },
                      decoration: InputDecoration(
                        hintText: 'Search Leads',
                        border: OutlineInputBorder(),
                      ),
                    ),
                    const SizedBox(height: 16),
                    Obx(() {
                      return CreateNewLeadScreenCard(
                        hintText: Strings.searchLead,
                        categories: trashDeleteListViewModel.filteredLeads
                            .map((lead) {
                          // Concatenate the desired fields into a single string
                          return '${lead.firstName ?? ''}\n${lead.email ?? ''}\n${lead.mobile ?? ''}'; // Use new lines for formatting
                        })
                            .where((leadString) => leadString.isNotEmpty) // Filter out any empty strings
                            .toList(),
                        onCategoryChanged: (selectedLeadString) {
                          // Find the selected lead from the list based on the selected string
                          final selectedLead = trashDeleteListViewModel.filteredLeads.firstWhere(
                                (lead) =>
                            '${lead.firstName ?? ''}\n${lead.email ?? ''}\n${lead.mobile ?? ''}' == selectedLeadString,
                            // orElse: () => "", // Handle case where no match is found
                          );

                          if (selectedLead != null) {
                            // Now you have the selected lead object
                            print("Selected Lead: ${selectedLead.firstName}, ${selectedLead.email}, ${selectedLead.mobile}");
                            // You can now use this lead object as needed
                          }
                        },
                      );
                    }),
                    const SizedBox(height: 16),
                    TextStyles.w500_14_Black(context, Strings.lead_type),
                    Obx(() {
                      if (leadTypeViewModel.loading.value) {
                        return Center(child: CircularProgressIndicator());
                      }
                      return Column(
                        children: [
                          CreateNewLeadScreenCard(
                            hintText: Strings.type,
                            categories: leadTypeViewModel.getLeadTypeNames(),
                            onCategoryChanged: (selectedType) {
                              print("Selected Lead Type: $selectedType");
                            },
                          ),
                        ],
                      );
                    }),
                  ],
                ),
              ),
            ),
            // ElevatedButton(
            //   onPressed: () {
            //     // Apply filters and close the dialog
            //     Navigator.of(context).pop();
            //   },
            //   child: Text(Strings.applyFilters),
            // ),
          ],
        ),
      ),
    );
  }
}=============
====================================

import 'package:flutter/cupertino.dart';
import 'package:get/get.dart';
import 'package:websuites/data/models/responseModels/leads/trashLeads/deleteList/delete_list_response_model.dart';
import '../../../../Utils/utils.dart';
import '../../../../data/models/requestModels/trash/delete_list/delete_list.dart';
import '../../../../data/repositories/repositories.dart';

class TrashDeleteListViewModel extends GetxController {
  final Repositories api = Repositories();
  final RxBool loading = false.obs;
  final RxList<Item> leads = <Item>[].obs;
  final Rx<Meta?> meta = Rx<Meta?>(null);

  // Add refresh controller if needed
  final RxBool isLoadingMore = false.obs;
  final RxBool hasError = false.obs;
  final RxString errorMessage = ''.obs;

  // This variable will hold the search term
  String searchTerm = '';

  @override
  void onInit() {
    super.onInit();
    fetchTrashDeleteList();
  }

  Future<void> fetchTrashDeleteList({
    int page = 1,
    int limit = 5,
    String? search,
  }) async {
    try {
      if (page == 1) {
        loading.value = true;
        hasError.value = false;
        errorMessage.value = '';
      } else {
        isLoadingMore.value = true;
      }

      final requestModel = DeleteListRequestModel(
        page: page,
        limit: limit,
        search: search,
      );

      final DeleteListResponseModel response = await api.trashDeleteListApi(requestModel.toJson());

      debugPrint('Response Trash Delete List: ${response.toJson()}');

      if (response.items != null) {
        if (page == 1) {
          leads.clear();
        }

        // Safely add new items
        final newItems = response.items!;
        leads.addAll(newItems);

        // Update metadata
        meta.value = response.meta;

        // Reset error states
        hasError.value = false;
        errorMessage.value = '';
      } else {
        debugPrint('No items found in response');
        if (page == 1) {
          leads.clear();
        }
      }
    } catch (error) {
      hasError.value = true;
      errorMessage.value = error.toString();
      debugPrint('Error fetching trash leads: $error');
      Utils.snackbarFailed('Failed to fetch leads: ${error.toString()}');
    } finally {
      if (page == 1) {
        loading.value = false;
      } else {
        isLoadingMore.value = false;
      }
    }
  }

  Future<void> refresh() async {
    await fetchTrashDeleteList(page: 1);
  }

  Future<void> loadMoreLeads() async {
    if (isLoadingMore.value || loading.value) return;

    final currentPage = meta.value?.currentPage ?? 0;
    final totalPages = meta.value?.totalPages ?? 0;

    if (currentPage < totalPages) {
      await fetchTrashDeleteList(
        page: currentPage + 1,
        limit: meta.value?.itemsPerPage ?? 15,
      );
    }
  }

  bool get canLoadMore {
    if (meta.value == null) return false;
    return (meta.value!.currentPage ?? 0) < (meta.value!.totalPages ?? 0);
  }

  void searchLeads(String? searchTerm) {
    this.searchTerm = searchTerm ?? ''; // Save the search term
    fetchTrashDeleteList(search: this.searchTerm, page: 1);
  }

  // Getter for filtered leads based on the current search term
  List<Item> get filteredLeads {
    if (searchTerm.isEmpty) {
      return leads; // Return all leads if no search term
    }
    return leads.where((lead) {
      // Check if any of the fields contain the search term
      return (lead.firstName?.toLowerCase().contains(searchTerm.toLowerCase()) ?? false) ||
          (lead.email?.toLowerCase().contains(searchTerm.toLowerCase()) ?? false) ||
          (lead.mobile?.toLowerCase().contains(searchTerm.toLowerCase()) ?? false);
    }).toList();
  }

  @override
  void onClose() {
    // Clean up if needed
    super.onClose();
  }
}
========================
import 'package:flutter/material.dart';
import 'package:get/get.dart';
import 'package:intl/intl.dart';
import 'package:websuites/views/leadScreens/createNewLead/create_newLead_screen.dart';
import 'package:websuites/views/leadScreens/trashLead/widgets/trashLeadCard/trash_lead_card.dart';
import '../../../resources/strings/strings.dart';
import '../../../utils/appColors/app_colors.dart';
import '../../../viewModels/leadScreens/trashLeads/deleteList/delete_list_viewModel.dart';
import '../../../viewModels/saveToken/save_token.dart';
import '../createNewLead/widgets/createNewLeadCard/create_new_lead_card.dart';

class TrashLeadScreen extends StatefulWidget {
  const TrashLeadScreen({Key? key}) : super(key: key);

  @override
  TrashLeadScreenState createState() => TrashLeadScreenState();
}

class TrashLeadScreenState extends State<TrashLeadScreen> {
  final _scaffoldKey = GlobalKey<ScaffoldState>();
  final TrashDeleteListViewModel _trashLeadController = Get.put(TrashDeleteListViewModel());
  final SaveUserData _userPreference = SaveUserData();
  final ScrollController _scrollController = ScrollController();

  String? userName;
  String? userEmail;

  @override
  void initState() {
    super.initState();
    _fetchUserData();
    _setupScrollController();
  }

  void _setupScrollController() {
    _scrollController.addListener(() {
      if (_scrollController.position.pixels >= _scrollController.position.maxScrollExtent - 200) {
        _trashLeadController.loadMoreLeads();
      }
    });
  }

  Future<void> _fetchUserData() async {
    try {
      final response = await _userPreference.getUser();
      setState(() {
        userName = response.user?.first_name;
        userEmail = response.user?.email;
      });
    } catch (e) {
      debugPrint('Error fetching user data: $e');
    }
  }
  String _formatDate(DateTime? dateTime) {
    if (dateTime == null) return 'N/A';
    try {
      return DateFormat('EEE, MMM d, y').format(dateTime); // e.g., Wed, Jun 26, 2024
    } catch (e) {
      return 'N/A';
    }
  }

  Widget _buildLoadMoreIndicator() {
    return Obx(() {
      if (_trashLeadController.loading.value && _trashLeadController.leads.isNotEmpty) {
        return const Padding(
          padding: EdgeInsets.all(8.0),
          child: Center(child: CircularProgressIndicator()),
        );
      }
      return const SizedBox.shrink();
    });
  }

  Widget _buildEmptyState() {
    return const Center(
      child: Column(
        mainAxisAlignment: MainAxisAlignment.center,
        children: [
          Icon(Icons.delete_outline, size: 48, color: Colors.grey),
          SizedBox(height: 16),
          Text(
            'No trash leads found',
            style: TextStyle(
              fontSize: 16,
              color: Colors.grey,
              fontWeight: FontWeight.w500,
            ),
          ),
        ],
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    bool isTablet = MediaQuery.of(context).size.width >= 500;
    return Scaffold(
      key: _scaffoldKey,
      backgroundColor: AllColors.whiteColor,
      body: RefreshIndicator(
        onRefresh: () => _trashLeadController.fetchTrashDeleteList(),
        child: Obx(() {
          if (_trashLeadController.loading.value && _trashLeadController.leads.isEmpty) {
            return const Center(child: CircularProgressIndicator());
          }

          if (_trashLeadController.leads.isEmpty) {
            return _buildEmptyState();
          }

          return ListView.builder(
            controller: _scrollController,
            padding: const EdgeInsets.symmetric(horizontal: 15),
            itemCount: _trashLeadController.leads.length + 1,
            itemBuilder: (context, index) {
              if (index == _trashLeadController.leads.length) {
                return _buildLoadMoreIndicator();
              }

              final lead = _trashLeadController.leads[index];
              return
                TrashLeadScreenCard(
                title: lead.organization ?? 'N/A',
                email: lead.email ?? 'N/A',
                mobile: lead.mobile ?? 'N/A',
                date: _formatDate(lead.deletedAt),
                remark: lead.deleteRemark ?? 'N/A',
                deleteBy: [lead.deletedBy?.firstName, lead.deletedBy?.lastName]
                    .where((e) => e != null && e.isNotEmpty)
                    .join(' ')
                    .trim()
                    .isEmpty
                    ? 'N/A'
                    : '${lead.deletedBy?.firstName ?? ''} ${lead.deletedBy?.lastName ?? ''}'.trim(),
                leadType: lead.type?.name ?? 'N/A',
              );
            },
          );
        }),
      ),
    );
  }

  @override
  void dispose() {
    _scrollController.dispose();
    super.dispose();
  }
}













