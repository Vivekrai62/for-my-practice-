import 'dart:developer';

import 'package:flutter/cupertino.dart';
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:lottie/lottie.dart';

import '../api/apis.dart';
import '../helper/dialogs.dart';
import '../main.dart';
import '../models/chat_user.dart';
import '../widgets/chat_user_card.dart';
import '../widgets/profile_image.dart';
import 'ai_screen.dart';
import 'profile_screen.dart';

// Home screen -- where all available contacts are shown
class HomeScreen extends StatefulWidget {
  const HomeScreen({super.key});

  @override
  State<HomeScreen> createState() => _HomeScreenState();
}

class _HomeScreenState extends State<HomeScreen> {
  // For storing all users
  List<ChatUser> _list = [];

  // For storing searched items
  final List<ChatUser> _searchList = [];

  // For storing search status
  bool _isSearching = false;

  // For current selected index in BottomNavigationBar
  int _selectedIndex = 0;

  @override
  void initState() {
    super.initState();
    APIs.getSelfInfo();

    // For updating user active status according to lifecycle events
    SystemChannels.lifecycle.setMessageHandler((message) {
      log('Message: $message');

      if (APIs.auth.currentUser != null) {
        if (message.toString().contains('resume')) {
          APIs.updateActiveStatus(true);
        }
        if (message.toString().contains('pause')) {
          APIs.updateActiveStatus(false);
        }
      }

      return Future.value(message);
    });
  }

  // Update the selected index of BottomNavigationBar
  void _onItemTapped(int index) {
    setState(() {
      _selectedIndex = index;
    });
    if (index == 1) {
      Navigator.push(
        context,
        MaterialPageRoute(builder: (_) => ProfileScreen(user: APIs.me)),
      );
    }
  }

  @override
  Widget build(BuildContext context) {
    return GestureDetector(
      // For hiding keyboard when a tap is detected on screen
      onTap: FocusScope.of(context).unfocus,
      child: Scaffold(
        // App bar
        appBar: AppBar(
          title: _isSearching
              ? TextField(
            decoration: const InputDecoration(
                border: InputBorder.none, hintText: 'Name, Email, ...'),
            autofocus: true,
            style: const TextStyle(fontSize: 17, letterSpacing: 0.5),
            // When search text changes, update the search list
            onChanged: (val) {
              _searchList.clear();
              val = val.toLowerCase();
              for (var i in _list) {
                if (i.name.toLowerCase().contains(val) ||
                    i.email.toLowerCase().contains(val)) {
                  _searchList.add(i);
                }
              }
              setState(() {});
            },
          )
              : const Text('We Chat'),
          actions: [
            // Search icon button
            IconButton(
              tooltip: 'Search',
              onPressed: () => setState(() => _isSearching = !_isSearching),
              icon: Icon(_isSearching
                  ? CupertinoIcons.clear_circled_solid
                  : CupertinoIcons.search),
            ),

            // Add user button
            IconButton(
              tooltip: 'Add User',
              onPressed: _addChatUserDialog,
              icon: const Icon(CupertinoIcons.person_add, size: 25),
            )
          ],
        ),

        // Floating button to add new user
        floatingActionButton: FloatingActionButton(
          backgroundColor: Colors.white,
          onPressed: _addChatUserDialog,
          child: Lottie.asset('assets/lottie/ai.json', width: 40),
        ),

        // Bottom Navigation Bar
        bottomNavigationBar: BottomNavigationBar(
          items: <BottomNavigationBarItem>[
            BottomNavigationBarItem(
              icon: const Icon(Icons.home),
              label: 'Home',
            ),
            BottomNavigationBarItem(
              icon: const ProfileImage(size: 32), // Profile icon
              label: 'Profile',
            ),
            BottomNavigationBarItem(
              icon: Icon(_isSearching
                  ? CupertinoIcons.clear_circled_solid
                  : CupertinoIcons.search), // Search icon
              label: 'Search',
            ),
          ],
          currentIndex: _selectedIndex,
          selectedItemColor: Colors.blue,
          onTap: _onItemTapped,
        ),

        // Body
        body: StreamBuilder(
          stream: APIs.getMyUsersId(),

          // Get id of only known users
          builder: (context, snapshot) {
            switch (snapshot.connectionState) {
            // If data is loading
              case ConnectionState.waiting:
              case ConnectionState.none:
                return const Center(child: CircularProgressIndicator());

            // If some or all data is loaded then show it
              case ConnectionState.active:
              case ConnectionState.done:
                return StreamBuilder(
                  stream: APIs.getAllUsers(
                      snapshot.data?.docs.map((e) => e.id).toList() ?? []),
                  builder: (context, snapshot) {
                    switch (snapshot.connectionState) {
                      case ConnectionState.waiting:
                      case ConnectionState.none:
                        return const Center(child: CircularProgressIndicator());

                      case ConnectionState.active:
                      case ConnectionState.done:
                        final data = snapshot.data?.docs;
                        _list = data
                            ?.map((e) => ChatUser.fromJson(e.data()))
                            .toList() ??
                            [];

                        if (_list.isNotEmpty) {
                          return ListView.builder(
                            itemCount:
                            _isSearching ? _searchList.length : _list.length,
                            padding: EdgeInsets.only(top: mq.height * .01),
                            physics: const BouncingScrollPhysics(),
                            itemBuilder: (context, index) {
                              return ChatUserCard(
                                user: _isSearching
                                    ? _searchList[index]
                                    : _list[index],
                              );
                            },
                          );
                        } else {
                          return const Center(
                            child: Text('No Connections Found!',
                                style: TextStyle(fontSize: 20)),
                          );
                        }
                    }
                  },
                );
            }
          },
        ),
      ),
    );
  }

  // For adding a new chat user
  void _addChatUserDialog() {
    String email = '';

    showDialog(
      context: context,
      builder: (_) => AlertDialog(
        contentPadding:
        const EdgeInsets.only(left: 24, right: 24, top: 20, bottom: 10),
        shape: const RoundedRectangleBorder(
            borderRadius: BorderRadius.all(Radius.circular(15))),
        title: const Row(
          children: [
            Icon(
              Icons.person_add,
              color: Colors.blue,
              size: 28,
            ),
            Text('  Add User')
          ],
        ),
        content: TextFormField(
          maxLines: null,
          onChanged: (value) => email = value,
          decoration: const InputDecoration(
              hintText: 'Email Id',
              prefixIcon: Icon(Icons.email, color: Colors.blue),
              border: OutlineInputBorder(
                  borderRadius: BorderRadius.all(Radius.circular(15)))),
        ),
        actions: [
          MaterialButton(
            onPressed: () {
              Navigator.pop(context);
            },
            child: const Text('Cancel',
                style: TextStyle(color: Colors.blue, fontSize: 16)),
          ),
          MaterialButton(
            onPressed: () async {
              Navigator.pop(context);
              if (email.trim().isNotEmpty) {
                await APIs.addChatUser(email).then((value) {
                  if (!value) {
                    Dialogs.showSnackbar(context, 'User does not Exists!');
                  }
                });
              }
            },
            child: const Text(
              'Add',
              style: TextStyle(color: Colors.blue, fontSize: 16),
            ),
          )
        ],
      ),
    );
  }
}
